# .github/workflows/release.yml

name: Rust Release CI

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v0.1.0, v1.0.0, etc.
  pull_request:
    branches:
      - 'main'

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            target: x86_64-unknown-linux-gnu
            asset_name: md2pdf-cli-linux-x86_64
          - os: windows-latest
            os_name: Windows
            target: x86_64-pc-windows-msvc
            asset_name: md2pdf-cli-windows-x86_64
          - os: macos-latest
            os_name: macOS
            target: x86_64-apple-darwin
            asset_name: md2pdf-cli-macos-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Cargo.toml Version
        run: |
          echo "--- Verifying Cargo.toml content ---"
          grep 'version =' Cargo.toml
          echo "------------------------------------"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          
      - name: Add target for cross-compilation
        run: rustup target add ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Verify Built Binary Version (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "--- Verifying built binary version ---"
          ./target/${{ matrix.target }}/release/md2pdf-cli --version
          echo "--------------------------------------"

      - name: Verify Built Binary Version (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "--- Verifying built binary version ---"
          ./target/${{ matrix.target }}/release/md2pdf-cli.exe --version
          echo "--------------------------------------"

      - name: Create packaging directory
        run: mkdir -p staging

      - name: Stage assets (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/md2pdf-cli staging/
          cp README.md staging/
          cp LICENCE staging/

      - name: Stage assets (Windows)
        if: runner.os == 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/md2pdf-cli.exe staging/
          cp README.md staging/
          cp LICENCE staging/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: staging/
          if-no-files-found: error

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Package downloaded artifacts
        run: |
          for dir in artifacts/*; do
            artifact_name=$(basename "$dir")
            if [[ "$artifact_name" == *"windows"* ]];
              then (cd "$dir" && zip -r "../${artifact_name}.zip" .);
              else (cd "$dir" && tar -czf "../${artifact_name}.tar.gz" *);
            fi
          done
      
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz